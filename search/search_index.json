{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Seja Bem-Vindo! Este Blog foi feito com o intuito de dividir conhecimentos adquiridos at\u00e9 aqui e tamb\u00e9m para consultas pessoais. Portanto fique a vontade em consultar e compartilhar.","title":"Home"},{"location":"index.html#seja-bem-vindo","text":"Este Blog foi feito com o intuito de dividir conhecimentos adquiridos at\u00e9 aqui e tamb\u00e9m para consultas pessoais. Portanto fique a vontade em consultar e compartilhar.","title":"Seja Bem-Vindo!"},{"location":"bancodados/sqlserver.html","text":"SQL SERVER Restaurar banco de dados externo Primeiros comandos de Query (Consulta) Comando SELECT Sele\u00e7\u00e3o de nomes e sobrenomes das pessoas; SELECT FirstName, LastName FROM person.Person; Comando DISTINCT Sele\u00e7\u00e3o de nomes \u00fanicos das pessoas; SELECT DISTINCT LastName FROM person.Person; Comando WHERE Sele\u00e7\u00e3o de pessoas com o mesmo sobrenome; SELECT FirstName, LastName FROM person.Person WHERE LastName = 'Stewart'; Consulta dos produtos da tabela Production.Product ; SELECT * FROM Production.Product; Sele\u00e7\u00e3o de produtos de cores azul ou preta; SELECT * FROM production.Product WHERE Color = 'Black' or Color = 'Blue'; Comandos COUNT e GROUP BY Consulta das cores de produtos dispon\u00edveis e suas quantidades; SELECT Color, COUNT(Color) AS Qtd FROM production.Product GROUP BY Color; Consulta de duas cores de produtos (preto e azul) e suas quantidades; SELECT Color, COUNT(Color) AS Qtd FROM production.Product WHERE Color = 'Black' or Color = 'Blue' GROUP BY Color; Consulta das t\u00edtulos de pessoas dispon\u00edveis e suas quantidades; SELECT title, count(title) AS 'Qtd' FROM Person.Person GROUP BY Title; Comandos WHERE utilizando operadores Consulta de produtos usando o operador diferente <> , para visualizar somente produtos diferentes do valor informado no WHERE ; SELECT * from production.Product WHERE color <> 'black'; Consulta de nomes de produtos entre valores espec\u00edficos de peso; SELECT Name,weight from Production.Product WHERE weight > 500 and weight < 700; Comandos TOP Consulta utilizando um limitador de linhas na pesquisa; SELECT TOP 5 * FROM Production.Product;","title":"SQL Server"},{"location":"bancodados/sqlserver.html#sql-server","text":"","title":"SQL SERVER"},{"location":"bancodados/sqlserver.html#restaurar-banco-de-dados-externo","text":"","title":"Restaurar banco de dados externo"},{"location":"bancodados/sqlserver.html#primeiros-comandos-de-query-consulta","text":"","title":"Primeiros comandos de Query (Consulta)"},{"location":"bancodados/sqlserver.html#comando-select","text":"Sele\u00e7\u00e3o de nomes e sobrenomes das pessoas; SELECT FirstName, LastName FROM person.Person;","title":"Comando SELECT"},{"location":"bancodados/sqlserver.html#comando-distinct","text":"Sele\u00e7\u00e3o de nomes \u00fanicos das pessoas; SELECT DISTINCT LastName FROM person.Person;","title":"Comando DISTINCT"},{"location":"bancodados/sqlserver.html#comando-where","text":"Sele\u00e7\u00e3o de pessoas com o mesmo sobrenome; SELECT FirstName, LastName FROM person.Person WHERE LastName = 'Stewart'; Consulta dos produtos da tabela Production.Product ; SELECT * FROM Production.Product; Sele\u00e7\u00e3o de produtos de cores azul ou preta; SELECT * FROM production.Product WHERE Color = 'Black' or Color = 'Blue';","title":"Comando WHERE"},{"location":"bancodados/sqlserver.html#comandos-count-e-group-by","text":"Consulta das cores de produtos dispon\u00edveis e suas quantidades; SELECT Color, COUNT(Color) AS Qtd FROM production.Product GROUP BY Color; Consulta de duas cores de produtos (preto e azul) e suas quantidades; SELECT Color, COUNT(Color) AS Qtd FROM production.Product WHERE Color = 'Black' or Color = 'Blue' GROUP BY Color; Consulta das t\u00edtulos de pessoas dispon\u00edveis e suas quantidades; SELECT title, count(title) AS 'Qtd' FROM Person.Person GROUP BY Title;","title":"Comandos COUNT e GROUP BY"},{"location":"bancodados/sqlserver.html#comandos-where-utilizando-operadores","text":"Consulta de produtos usando o operador diferente <> , para visualizar somente produtos diferentes do valor informado no WHERE ; SELECT * from production.Product WHERE color <> 'black'; Consulta de nomes de produtos entre valores espec\u00edficos de peso; SELECT Name,weight from Production.Product WHERE weight > 500 and weight < 700;","title":"Comandos WHERE utilizando operadores"},{"location":"bancodados/sqlserver.html#comandos-top","text":"Consulta utilizando um limitador de linhas na pesquisa; SELECT TOP 5 * FROM Production.Product;","title":"Comandos TOP"},{"location":"geral/fico.html","text":"Prepara\u00e7\u00e3o de ambiente Instalar do Java jfk-8.2 ou superior Instalar o Blaze Advisor Instala\u00e7\u00e3o do IDLE Eclipse Estrutura de Pastas no diret\u00f3rio do Blaze C:\\Blaze -Advisor75 -License -Uninstall -Projetos ----------> Pasta criada |__eclipse ------> Repositorio do eclipse |__Repositorio |__workspace-eclipse","title":"FICO Systems"},{"location":"geral/fico.html#preparacao-de-ambiente","text":"","title":"Prepara\u00e7\u00e3o de ambiente"},{"location":"geral/fico.html#instalar-do-java-jfk-82-ou-superior","text":"","title":"Instalar do Java jfk-8.2 ou superior"},{"location":"geral/fico.html#instalar-o-blaze-advisor","text":"","title":"Instalar o Blaze Advisor"},{"location":"geral/fico.html#instalacao-do-idle-eclipse","text":"","title":"Instala\u00e7\u00e3o do IDLE Eclipse"},{"location":"geral/fico.html#estrutura-de-pastas-no-diretorio-do-blaze","text":"C:\\Blaze -Advisor75 -License -Uninstall -Projetos ----------> Pasta criada |__eclipse ------> Repositorio do eclipse |__Repositorio |__workspace-eclipse","title":"Estrutura de Pastas no diret\u00f3rio do Blaze"},{"location":"geral/git.html","text":"Comandos B\u00e1sicos do Git Crie um arquivo .gitignore para ignorar arquivos do projeto: touch .gitignore e escreva os nomes dos arquivos que n\u00e3o deseja commitar; $ git init -> #Inicia um Branch(Ponteiro) do tipo Master no reposit\u00f3rio local; $ git status -> #Verifica em que est\u00e1gio est\u00e3o os arquivos, se est\u00e3o em Stanging Area ou j\u00e1 se est\u00e3o comitados; $ git add <nome do arquivo> -> #Adiciona arquivos \u00danicos em Staging Area; $ git add . -> #Adiciona Todos os arquivos da pasta local em Staging Area; $ git commit -m \"Descri\u00e7\u00e3o de hist\u00f3rico\" -> #Traqueia/Comita os arquivos que est\u00e3o em Staging Area; $ git commite -a -m \"nome das mudancas\" -> #Faz Add e Commite no mesmo comando; $ git diff -> #Verifica arquivos modificados e suas modifica\u00e7\u00f5es; $ git diff --staged -> #Verificar arquivos modificados e suas modificacoes de arquivos em Staging Area; $ git log -> #Verifica todos logs feitos no projeto; $ git log --pretty=oneline -> #Verifica todos logs e seus c\u00f3digos; $ git log -p -> #Verifica todos logs feitos no projeto e o que foi feito neles; $ git log -p -(quantidade) -> #Verifica todos logs feitos no projeto e o que foi feito neles, mas filtrando a quantidade de logs; $ gitk -> #Abrir App para visualizar versoes do projeto; $ git commit --amend -m \"nome do log procurado (edicao)\" -> #Editar um Commit realizado; $ git reset HEAD <nome do arquivo> -> #Retirar arquivos do Staging Area, que foram feitos Add; $ git checkout -- <nome do arquivo> -> #Retorna o arquivo para ultima modifica\u00e7\u00e3o; $ git rm <nome do arquivo> -> #Deletar arquivos; $ git tag -a \"nometag\" -m \"Descricaotag\" -> #Adicionar TAG no projeto; $ git tag -> #Verifica TAGs do projeto; $ git tag -a \"nometag\" -m \"Chave do log\" -> #Adicionar TAG em log feito anteriormente; $ git show \"nometag\" -> #Verificar dados de uma TAG; $ git checkout \"nometag\" -> #Utilizar a TAG para mudar a vers\u00e3o do projeto; Manipular Branch's Criar novo Branch e clona-lo em reposit\u00f3rio GitHub $ git checkout -b <nome_branch> -> #Criar um novo branch $ git remote add <nome_branch> <link_github> - #Direciona o endere\u00e7o do reposit\u00f3rio Github; $ git push -u origin <nome_branch> -> #Cria um clone do reposit\u00f3rio local no reposit\u00f3rio do Github; $ mkdocs gh-deploy -> #Realiza o Deploy para o servidor do Github. Apagar o branch localmente no Git $ git branch -D <nome do branch> Apagar o branch remoto no Github Obs: Fa\u00e7a um backup dos arquivos do reposit\u00f3rio que ser\u00e1 deletado, pois este comando deletar\u00e1 inclusive os arquivos no reposit\u00f3rio local de sua m\u00e1quina; $ git push origin --delete <nome do branch> Comandos de Deploy Deploy do Mkdocs no Github $ git init -> #Inicia um Branch(Ponteiro) do tipo Master no reposit\u00f3rio local da pasta; Crie o arquivos .gitignore para informar o nome de arquivos que n\u00e3o ir\u00e3o para Deploy; $ git status -> #Verifica em que est\u00e1gio est\u00e3o os arquivos, se est\u00e3o em Stanging Area ou j\u00e1 se est\u00e3o comitados; $ git add . -> #Adiciona os arquivos em Stanging Area; $ git commit -m \"Descri\u00e7\u00e3o de hist\u00f3rico\" -> #Traqueia/Comita os arquivos que est\u00e3o em Staging Area; Criar um reposit\u00f3rio no Github; V\u00e1 em criar um clone do Reposit\u00f3rio no GitHub e copie o url; $ git remote add origin <link do github de clone> -> #Direciona o endere\u00e7o do reposit\u00f3rio Github; $ git push -u origin <nome_branch> -> #Cria um clone do reposit\u00f3rio local no reposit\u00f3rio do Github; $ mkdocs gh-deploy -> #Realiza o Deploy para o servidor do Github. Atualizacao do Mkdocs e Deploy no Github $ git status -> #Verifica em que est\u00e1gio est\u00e3o os arquivos, se est\u00e3o em Stanging Area ou j\u00e1 se est\u00e3o comitados; $ git add . -> #Adiciona os arquivos em Stanging Area; $ git commit -m \"Descri\u00e7\u00e3o de hist\u00f3rico\" -> #Traqueia/Comita os arquivos que est\u00e3o em Staging Area; $ git push -u origin <nome_branch> -> #Cria um clone do reposit\u00f3rio local no reposit\u00f3rio do Github; $ mkdocs gh-deploy -> #Realiza o Deploy para o servidor do Github.","title":"Git-GitHub"},{"location":"geral/git.html#comandos-basicos-do-git","text":"Crie um arquivo .gitignore para ignorar arquivos do projeto: touch .gitignore e escreva os nomes dos arquivos que n\u00e3o deseja commitar; $ git init -> #Inicia um Branch(Ponteiro) do tipo Master no reposit\u00f3rio local; $ git status -> #Verifica em que est\u00e1gio est\u00e3o os arquivos, se est\u00e3o em Stanging Area ou j\u00e1 se est\u00e3o comitados; $ git add <nome do arquivo> -> #Adiciona arquivos \u00danicos em Staging Area; $ git add . -> #Adiciona Todos os arquivos da pasta local em Staging Area; $ git commit -m \"Descri\u00e7\u00e3o de hist\u00f3rico\" -> #Traqueia/Comita os arquivos que est\u00e3o em Staging Area; $ git commite -a -m \"nome das mudancas\" -> #Faz Add e Commite no mesmo comando; $ git diff -> #Verifica arquivos modificados e suas modifica\u00e7\u00f5es; $ git diff --staged -> #Verificar arquivos modificados e suas modificacoes de arquivos em Staging Area; $ git log -> #Verifica todos logs feitos no projeto; $ git log --pretty=oneline -> #Verifica todos logs e seus c\u00f3digos; $ git log -p -> #Verifica todos logs feitos no projeto e o que foi feito neles; $ git log -p -(quantidade) -> #Verifica todos logs feitos no projeto e o que foi feito neles, mas filtrando a quantidade de logs; $ gitk -> #Abrir App para visualizar versoes do projeto; $ git commit --amend -m \"nome do log procurado (edicao)\" -> #Editar um Commit realizado; $ git reset HEAD <nome do arquivo> -> #Retirar arquivos do Staging Area, que foram feitos Add; $ git checkout -- <nome do arquivo> -> #Retorna o arquivo para ultima modifica\u00e7\u00e3o; $ git rm <nome do arquivo> -> #Deletar arquivos; $ git tag -a \"nometag\" -m \"Descricaotag\" -> #Adicionar TAG no projeto; $ git tag -> #Verifica TAGs do projeto; $ git tag -a \"nometag\" -m \"Chave do log\" -> #Adicionar TAG em log feito anteriormente; $ git show \"nometag\" -> #Verificar dados de uma TAG; $ git checkout \"nometag\" -> #Utilizar a TAG para mudar a vers\u00e3o do projeto;","title":"Comandos B\u00e1sicos do Git"},{"location":"geral/git.html#manipular-branchs","text":"","title":"Manipular Branch's "},{"location":"geral/git.html#criar-novo-branch-e-clona-lo-em-repositorio-github","text":"$ git checkout -b <nome_branch> -> #Criar um novo branch $ git remote add <nome_branch> <link_github> - #Direciona o endere\u00e7o do reposit\u00f3rio Github; $ git push -u origin <nome_branch> -> #Cria um clone do reposit\u00f3rio local no reposit\u00f3rio do Github; $ mkdocs gh-deploy -> #Realiza o Deploy para o servidor do Github.","title":"Criar novo Branch e clona-lo em reposit\u00f3rio GitHub"},{"location":"geral/git.html#apagar-o-branch-localmente-no-git","text":"$ git branch -D <nome do branch>","title":"Apagar o branch localmente no Git"},{"location":"geral/git.html#apagar-o-branch-remoto-no-github","text":"Obs: Fa\u00e7a um backup dos arquivos do reposit\u00f3rio que ser\u00e1 deletado, pois este comando deletar\u00e1 inclusive os arquivos no reposit\u00f3rio local de sua m\u00e1quina; $ git push origin --delete <nome do branch>","title":"Apagar o branch remoto no Github"},{"location":"geral/git.html#comandos-de-deploy","text":"","title":"Comandos de Deploy"},{"location":"geral/git.html#deploy-do-mkdocs-no-github","text":"$ git init -> #Inicia um Branch(Ponteiro) do tipo Master no reposit\u00f3rio local da pasta; Crie o arquivos .gitignore para informar o nome de arquivos que n\u00e3o ir\u00e3o para Deploy; $ git status -> #Verifica em que est\u00e1gio est\u00e3o os arquivos, se est\u00e3o em Stanging Area ou j\u00e1 se est\u00e3o comitados; $ git add . -> #Adiciona os arquivos em Stanging Area; $ git commit -m \"Descri\u00e7\u00e3o de hist\u00f3rico\" -> #Traqueia/Comita os arquivos que est\u00e3o em Staging Area; Criar um reposit\u00f3rio no Github; V\u00e1 em criar um clone do Reposit\u00f3rio no GitHub e copie o url; $ git remote add origin <link do github de clone> -> #Direciona o endere\u00e7o do reposit\u00f3rio Github; $ git push -u origin <nome_branch> -> #Cria um clone do reposit\u00f3rio local no reposit\u00f3rio do Github; $ mkdocs gh-deploy -> #Realiza o Deploy para o servidor do Github.","title":"Deploy do Mkdocs no Github"},{"location":"geral/git.html#atualizacao-do-mkdocs-e-deploy-no-github","text":"$ git status -> #Verifica em que est\u00e1gio est\u00e3o os arquivos, se est\u00e3o em Stanging Area ou j\u00e1 se est\u00e3o comitados; $ git add . -> #Adiciona os arquivos em Stanging Area; $ git commit -m \"Descri\u00e7\u00e3o de hist\u00f3rico\" -> #Traqueia/Comita os arquivos que est\u00e3o em Staging Area; $ git push -u origin <nome_branch> -> #Cria um clone do reposit\u00f3rio local no reposit\u00f3rio do Github; $ mkdocs gh-deploy -> #Realiza o Deploy para o servidor do Github.","title":"Atualizacao do Mkdocs e Deploy no Github"},{"location":"geral/venv.html","text":"Criando Ambiente Virtual venv no Windows Crie sua pasta de Environments e em seu prompt do windows digite o comando abaixo para criar o ambiente virtual venv ; C:\\Users\\denis\\Environments\\Flask_Form>python -m venv <nome_de_sua_env> Ap\ufffds criado seu ambiente virtual digite o comando abaixo para entrar na env criada; C:\\Users\\denis\\Environments\\Flask_Form><nome_de_sua_env>\\Scripts\\activate Sua env estara ativada: (<nome_de_sua_env>) C:\\Users\\denis\\Environments\\Flask_Form>","title":"venv"},{"location":"geral/venv.html#criando-ambiente-virtual-venv-no-windows","text":"Crie sua pasta de Environments e em seu prompt do windows digite o comando abaixo para criar o ambiente virtual venv ; C:\\Users\\denis\\Environments\\Flask_Form>python -m venv <nome_de_sua_env> Ap\ufffds criado seu ambiente virtual digite o comando abaixo para entrar na env criada; C:\\Users\\denis\\Environments\\Flask_Form><nome_de_sua_env>\\Scripts\\activate Sua env estara ativada: (<nome_de_sua_env>) C:\\Users\\denis\\Environments\\Flask_Form>","title":"Criando Ambiente Virtual venv no Windows"},{"location":"geral/virtualenv.html","text":"Criando Ambiente Virtual virtualenv no Windows Considerando que voce ja tem o Python instalado, bem como as variaveis de ambiente e o pip, siga o procedimento a seguir. Instala pacote para cria\u00e7\u00e3o de ambientes virtuais pip install virtualenv Instalar pacote para gerenciamento dos ambientes virtuais pip install virtualenvwrapper-win Crie um ambiente virtual mkvirtualenv nome_do_ambiente Ative o ambiente virtual rec\u00e9m criado workon nome_do_ambiente Agora \u00e9 s\u00f3 instalar os pacotes que deseja ter nesse ambiente virtual que voc\u00ea acabou de criar e ativar. Voc\u00ea pode ter quantos ambientes desejar e eles, por padr\u00e3o, ficam dentro no diret\u00f3rio Envs dentro da pasta do usu\u00e1rio. Por exemplo: C:\\Users\\user\\Envs","title":"virtualenv"},{"location":"geral/virtualenv.html#criando-ambiente-virtual-virtualenv-no-windows","text":"Considerando que voce ja tem o Python instalado, bem como as variaveis de ambiente e o pip, siga o procedimento a seguir. Instala pacote para cria\u00e7\u00e3o de ambientes virtuais pip install virtualenv Instalar pacote para gerenciamento dos ambientes virtuais pip install virtualenvwrapper-win Crie um ambiente virtual mkvirtualenv nome_do_ambiente Ative o ambiente virtual rec\u00e9m criado workon nome_do_ambiente Agora \u00e9 s\u00f3 instalar os pacotes que deseja ter nesse ambiente virtual que voc\u00ea acabou de criar e ativar. Voc\u00ea pode ter quantos ambientes desejar e eles, por padr\u00e3o, ficam dentro no diret\u00f3rio Envs dentro da pasta do usu\u00e1rio. Por exemplo: C:\\Users\\user\\Envs","title":"Criando Ambiente Virtual virtualenv no Windows"},{"location":"nodejs/postgress_node.html","text":"npm init -y npm install --save sequelize npm install express npm install --save pg pg-hstore npm add sequelize-cli -D npm install -g nodemon","title":"Express-Postgres"},{"location":"projetos/bethehero.html","text":"Be The Hero Acesse o projeto no github em Frontend/Backend (Desktop e Mobile) Acesse o frontend da aplica\u00e7\u00e3o no Heroku","title":"Be-The-Hero"},{"location":"projetos/bethehero.html#be-the-hero","text":"Acesse o projeto no github em Frontend/Backend (Desktop e Mobile) Acesse o frontend da aplica\u00e7\u00e3o no Heroku","title":"Be The Hero"},{"location":"projetos/django-apilibrary.html","text":"Django - Api com Rest Framework Desenvolvimento de Api para cadastro de livros utilizando o Framework Django para aprendizado de conceitos base da biblioteca Rest Framework Acesse o projeto no github","title":"Django-Api-Library"},{"location":"projetos/django-apilibrary.html#django-api-com-rest-framework","text":"Desenvolvimento de Api para cadastro de livros utilizando o Framework Django para aprendizado de conceitos base da biblioteca Rest Framework Acesse o projeto no github","title":"Django - Api com Rest Framework"},{"location":"projetos/django-multilang.html","text":"Django - Multi Language Documenta\u00e7\u00e3o do Django para instalar compilador https://docs.djangoproject.com/en/3.2/topics/i18n/translation/ Acesse o projeto no github","title":"Django-Multi-Language"},{"location":"projetos/django-multilang.html#django-multi-language","text":"Documenta\u00e7\u00e3o do Django para instalar compilador https://docs.djangoproject.com/en/3.2/topics/i18n/translation/ Acesse o projeto no github","title":"Django - Multi Language"},{"location":"projetos/django-reactsample.html","text":"Django - React Api Sample Iniciando um projeto React com Django Acesse o projeto no github","title":"Django-React-Sample"},{"location":"projetos/django-reactsample.html#django-react-api-sample","text":"Iniciando um projeto React com Django Acesse o projeto no github","title":"Django - React Api Sample"},{"location":"projetos/netcore-apimongo.html","text":".NET - Api com MongoDB Acesse o projeto no github","title":".NET-Api-MongoDB"},{"location":"projetos/netcore-apimongo.html#net-api-com-mongodb","text":"Acesse o projeto no github","title":".NET - Api com MongoDB"},{"location":"python/django-migracao-db.html","text":"Migra\u00e7\u00e3o para o banco PostgreSQL Pacotes Instalar o pacote para conex\u00e3o com o Postgress; pip install psycopg2 Exporta\u00e7\u00e3o Exportar dados do banco atual em xml ou json- SQLite; python manage.py dumpdata --indent 3 --format xml > dados.xml Edi\u00e7\u00e3o de arquivo settings.py Configura\u00e7\u00e3o da conex\u00e3o com o banco Postgres; DATABASES = { 'default':{ 'ENGINE':'django.db.backends.postgresql_psycopg2', 'NAME': 'teste', 'USER': 'postgres', 'PASSWORD': 'denis', 'HOST': 'localhost', 'PORT': '', } } Migra\u00e7\u00f5es Migra\u00e7\u00f5es para o banco Postgres; python manage.py migrate --run-syncdb Carga da dados Carregamento do banco Postgres com os dados exportados em xml/json; python manage.py loaddata dados.xml","title":"Django-Migra\u00e7\u00e3o de banco"},{"location":"python/django-migracao-db.html#migracao-para-o-banco-postgresql","text":"","title":"Migra\u00e7\u00e3o para o banco PostgreSQL"},{"location":"python/django-migracao-db.html#pacotes","text":"Instalar o pacote para conex\u00e3o com o Postgress; pip install psycopg2","title":"Pacotes"},{"location":"python/django-migracao-db.html#exportacao","text":"Exportar dados do banco atual em xml ou json- SQLite; python manage.py dumpdata --indent 3 --format xml > dados.xml","title":"Exporta\u00e7\u00e3o"},{"location":"python/django-migracao-db.html#edicao-de-arquivo-settingspy","text":"Configura\u00e7\u00e3o da conex\u00e3o com o banco Postgres; DATABASES = { 'default':{ 'ENGINE':'django.db.backends.postgresql_psycopg2', 'NAME': 'teste', 'USER': 'postgres', 'PASSWORD': 'denis', 'HOST': 'localhost', 'PORT': '', } }","title":"Edi\u00e7\u00e3o de arquivo settings.py"},{"location":"python/django-migracao-db.html#migracoes","text":"Migra\u00e7\u00f5es para o banco Postgres; python manage.py migrate --run-syncdb","title":"Migra\u00e7\u00f5es"},{"location":"python/django-migracao-db.html#carga-da-dados","text":"Carregamento do banco Postgres com os dados exportados em xml/json; python manage.py loaddata dados.xml","title":"Carga da dados"},{"location":"python/flask_first.html","text":"Microframework Flask Aplica\u00e7\u00e3o b\u00e1sica em Flask e Html Arquitetura do Flask Antes de iniciarmos a nossa aplica\u00e7\u00e3o em si primeiro vamos entender, de uma forma resumida, como funciona a arquitetura do sistema; O Flask utiliza uma arquitetura de modo MVC (Model-Viewl-Controller) onde existem 3 camadas que conversam entre si. MVC \u00e9 nada mais que um padr\u00e3o de arquitetura de software, separando sua aplica\u00e7\u00e3o em 3 camadas: A camada de intera\u00e7\u00e3o do usu\u00e1rio (View) , a camada de manipula\u00e7\u00e3o dos dados (Model) e a camada de controle (Controller) ; Model : Respons\u00e1vel pela leitura e escrita de dados, e tamb\u00e9m de suas valida\u00e7\u00f5es, ou seja, seu papel sempre ser\u00e1 de manipula\u00e7\u00e3o de dados; View : Respons\u00e1vel por fazer a intera\u00e7\u00e3o com o usu\u00e1rio, fazendo a exibi\u00e7\u00e3o de sua interface atrav\u00e9s de linguagens de marca\u00e7\u00e3o como: html e xml; Controller : Respons\u00e1vel por receber as requisi\u00e7\u00f5es do usu\u00e1rio e controlar qual model ser\u00e1 usado e em qual view ser\u00e1 exibida; Foi criado uma l\u00f3gica bem simples para analisar se o n\u00famero digitado \u00e9 Par ou Impar , em seguida atribuido esta l\u00f3gica em uma fun\u00e7\u00e3o def que ir\u00e1 executar todo este trabalho de decis\u00e3o. Vamos colocar o todo o c\u00f3digo no arquivo de nome main.py ; Diret\u00f3rios: /Flask /-main.py Utilizando a biblioteca Flask C\u00f3digo do arquivo main.py ; from flask import Flask, request, render_template # Importando as bibliotecas; app = Flask(__name__) # Criado uma inst\u00e2ncia; @app.route('/') # Cria uma rota; def main(): resultado = None numero = request.args.get('numero') # Utilizado verbo GET do protocollo http; if numero is not None: # Corre\u00e7\u00e3o na vari\u00e1vel numero para n\u00e3o vir como NoneType; numero = float(numero) n = ( numero % 2) if n == 0: resultado = 'Este n\u00famero \u00e9 Par' else: resultado = 'Este n\u00famero \u00e9 Impar' return render_template('index.html', resultado=resultado) if __name__ == '__main__': app.run(debug=True) # Executa a aplica\u00e7\u00e3o; Observas\u00f5es do c\u00f3digo: app = Flask(__name__) Criado uma inst\u00e2ncia dentro da vari\u00e1vel app , em seguida foi atribuido a vari\u00e1vel especial name a esta inst\u00e2ncia que o interpretador do Python ir\u00e1 decidir se executar\u00e1 como arquivo principal main ou como arquivo secund\u00e1rio etc.; @app.route('/') def main(): O Python t\u00eam um m\u00e9todo de trabalho de nome decorator que tem o poder de atrelar fun\u00e7\u00f5es, ou seja, usando fun\u00e7\u00f5es como argumento de outras fun\u00e7\u00f5es. Neste caso, o m\u00e9todo route padr\u00e3o do python dentro do flask , cria uma rota para a fun\u00e7\u00e3o que criamos em seguida, que neste caso demos o nome main para a fun\u00e7\u00e3o; Foi importado a biblioteca request e utilizado o m\u00e9todo request.args.get para obter os valores digitados pelo usu\u00e1rio e guardar na vari\u00e1vel numero ; Foi necess\u00e1rio criar um if para a vari\u00e1vel numero retornar em type float e n\u00e3o retornar como NoneType (tive este problema anteriromente e resolvi com este if); Formata\u00e7\u00e3o de Template Jinja/Html Criado outro arquivo de nome index.html e digitado o c\u00f3digo abaixo; Diret\u00f3rios: /Flask /-main.py /templates /-index.html C\u00f3digo do arquivo index.html ; <html> <head> <title>Minha primeira aplica\u00e7\u00e3o em Flask</title> </head> <body> Par ou Impar? <div> <form method=\"get\"> Digite um n\u00famero: <input type=\"text\" name=\"numero\"> <br> <input type=\"submit\" value=\"Enviar\"> </form> </div> {% if resultado %} <div> {{resultado}} </div> {% endif %} </body> </html> Observas\u00f5es do template: Para funcionar a inser\u00e7\u00e3o do n\u00famero pelo html, na tag input \u00e9 necess\u00e1rio criar um atributo name com o valor do mesmo nome da vari\u00e1vel que receber\u00e1 este valor, no caso a vari\u00e1vel numero ; O if na que est\u00e1 no html faz parte da sintaxe do Jinja; As sintaxe {{resultado}} no div fazem aparecer o resultado da verifica\u00e7\u00e3o final do n\u00famero, apenas se a vari\u00e1vel resultado n\u00e3o for None ; Perceba que colocamos o template index.html dentro da pasta templates, pois o Flask por padr\u00e3o l\u00ea os templates dentro desta pasta, ent\u00e3o s\u00f3 precisamos colocar no render_template o nome do nosso template e n\u00e3o o caminho deste diret\u00f3rio; Agora \u00e9 s\u00f3 rodar nossa aplica\u00e7\u00e3o executando o comando python main.py no prompt e abrir a URL http://127.0.0.1:5000/ ou http://localhost:5000/ ; Nossa aplica\u00e7\u00e3o ficar\u00e1 com esta cara:","title":"Framework Flask"},{"location":"python/flask_first.html#microframework-flask","text":"","title":"Microframework Flask"},{"location":"python/flask_first.html#aplicacao-basica-em-flask-e-html","text":"","title":"Aplica\u00e7\u00e3o b\u00e1sica em Flask e Html"},{"location":"python/flask_first.html#arquitetura-do-flask","text":"Antes de iniciarmos a nossa aplica\u00e7\u00e3o em si primeiro vamos entender, de uma forma resumida, como funciona a arquitetura do sistema; O Flask utiliza uma arquitetura de modo MVC (Model-Viewl-Controller) onde existem 3 camadas que conversam entre si. MVC \u00e9 nada mais que um padr\u00e3o de arquitetura de software, separando sua aplica\u00e7\u00e3o em 3 camadas: A camada de intera\u00e7\u00e3o do usu\u00e1rio (View) , a camada de manipula\u00e7\u00e3o dos dados (Model) e a camada de controle (Controller) ; Model : Respons\u00e1vel pela leitura e escrita de dados, e tamb\u00e9m de suas valida\u00e7\u00f5es, ou seja, seu papel sempre ser\u00e1 de manipula\u00e7\u00e3o de dados; View : Respons\u00e1vel por fazer a intera\u00e7\u00e3o com o usu\u00e1rio, fazendo a exibi\u00e7\u00e3o de sua interface atrav\u00e9s de linguagens de marca\u00e7\u00e3o como: html e xml; Controller : Respons\u00e1vel por receber as requisi\u00e7\u00f5es do usu\u00e1rio e controlar qual model ser\u00e1 usado e em qual view ser\u00e1 exibida; Foi criado uma l\u00f3gica bem simples para analisar se o n\u00famero digitado \u00e9 Par ou Impar , em seguida atribuido esta l\u00f3gica em uma fun\u00e7\u00e3o def que ir\u00e1 executar todo este trabalho de decis\u00e3o. Vamos colocar o todo o c\u00f3digo no arquivo de nome main.py ; Diret\u00f3rios: /Flask /-main.py","title":"Arquitetura do Flask"},{"location":"python/flask_first.html#utilizando-a-biblioteca-flask","text":"C\u00f3digo do arquivo main.py ; from flask import Flask, request, render_template # Importando as bibliotecas; app = Flask(__name__) # Criado uma inst\u00e2ncia; @app.route('/') # Cria uma rota; def main(): resultado = None numero = request.args.get('numero') # Utilizado verbo GET do protocollo http; if numero is not None: # Corre\u00e7\u00e3o na vari\u00e1vel numero para n\u00e3o vir como NoneType; numero = float(numero) n = ( numero % 2) if n == 0: resultado = 'Este n\u00famero \u00e9 Par' else: resultado = 'Este n\u00famero \u00e9 Impar' return render_template('index.html', resultado=resultado) if __name__ == '__main__': app.run(debug=True) # Executa a aplica\u00e7\u00e3o; Observas\u00f5es do c\u00f3digo: app = Flask(__name__) Criado uma inst\u00e2ncia dentro da vari\u00e1vel app , em seguida foi atribuido a vari\u00e1vel especial name a esta inst\u00e2ncia que o interpretador do Python ir\u00e1 decidir se executar\u00e1 como arquivo principal main ou como arquivo secund\u00e1rio etc.; @app.route('/') def main(): O Python t\u00eam um m\u00e9todo de trabalho de nome decorator que tem o poder de atrelar fun\u00e7\u00f5es, ou seja, usando fun\u00e7\u00f5es como argumento de outras fun\u00e7\u00f5es. Neste caso, o m\u00e9todo route padr\u00e3o do python dentro do flask , cria uma rota para a fun\u00e7\u00e3o que criamos em seguida, que neste caso demos o nome main para a fun\u00e7\u00e3o; Foi importado a biblioteca request e utilizado o m\u00e9todo request.args.get para obter os valores digitados pelo usu\u00e1rio e guardar na vari\u00e1vel numero ; Foi necess\u00e1rio criar um if para a vari\u00e1vel numero retornar em type float e n\u00e3o retornar como NoneType (tive este problema anteriromente e resolvi com este if);","title":"Utilizando a biblioteca Flask"},{"location":"python/flask_first.html#formatacao-de-template-jinjahtml","text":"Criado outro arquivo de nome index.html e digitado o c\u00f3digo abaixo; Diret\u00f3rios: /Flask /-main.py /templates /-index.html C\u00f3digo do arquivo index.html ; <html> <head> <title>Minha primeira aplica\u00e7\u00e3o em Flask</title> </head> <body> Par ou Impar? <div> <form method=\"get\"> Digite um n\u00famero: <input type=\"text\" name=\"numero\"> <br> <input type=\"submit\" value=\"Enviar\"> </form> </div> {% if resultado %} <div> {{resultado}} </div> {% endif %} </body> </html> Observas\u00f5es do template: Para funcionar a inser\u00e7\u00e3o do n\u00famero pelo html, na tag input \u00e9 necess\u00e1rio criar um atributo name com o valor do mesmo nome da vari\u00e1vel que receber\u00e1 este valor, no caso a vari\u00e1vel numero ; O if na que est\u00e1 no html faz parte da sintaxe do Jinja; As sintaxe {{resultado}} no div fazem aparecer o resultado da verifica\u00e7\u00e3o final do n\u00famero, apenas se a vari\u00e1vel resultado n\u00e3o for None ; Perceba que colocamos o template index.html dentro da pasta templates, pois o Flask por padr\u00e3o l\u00ea os templates dentro desta pasta, ent\u00e3o s\u00f3 precisamos colocar no render_template o nome do nosso template e n\u00e3o o caminho deste diret\u00f3rio; Agora \u00e9 s\u00f3 rodar nossa aplica\u00e7\u00e3o executando o comando python main.py no prompt e abrir a URL http://127.0.0.1:5000/ ou http://localhost:5000/ ; Nossa aplica\u00e7\u00e3o ficar\u00e1 com esta cara:","title":"Formata\u00e7\u00e3o de Template Jinja/Html"},{"location":"python/python_scripts.html","text":"Gr\u00e1ficos em Python Importando Bibliotecas Python %matplotlib inline --> #Inicia a ferramenta do python; import pandas as pd --> #Importa a biblioteca pandas e d\u00e1 o apelido 'pd'; import matplotlib.pyplot as plt --> #Importa a biblioteca matplotlib e d\u00e1 um apelido 'plt'; import seaborn as sns ---> #Importa a biblioteca Seaborn e d\u00e1 um apelido 'sns'; plt.style.use('ggplot') ---> #Configura a plotagem do gr\u00e1fico; C\u00f3digos de Cria\u00e7\u00e3o e Manipula\u00e7\u00e3o de Gr\u00e1ficos #Criar uma vari\u00e1vel para inserir o Dataset(base de dados para an\u00e1lise); nome_variavel = pd.read_csv('nome_arquivo.csv') #Visualizar a quantidade de linhas da tabela de dados do Dataset; nome_variavel.head(numero_linhas) #Visualizar informa\u00e7\u00f5es das colunas; nome_variavel.describe() #Visualizar tipo de dado de cada coluna; nome_variavel.dtypes #Visualizar quantidades de linhas e colunas do Dataset; nome_variavel.shape #Visualizar quantidades de uma ou v\u00e1rias colunas; nome_variavel['Nome_coluna'].value_counts() #Plotar um gr\u00e1fico simples de coluna e valores usando a biblioteca pandas/matplotlib, usando o c\u00f3digo de plotagem '.plot()'; nome_variavel['Nome_coluna'].value_counts().plot #Plotar um gr\u00e1fico visualmente elaborado em uma linha de c\u00f3digo; nome_variavel['Nome_coluna'].value_counts().head(10).plot(kind='bar', figsize=(11,5), grid=False, rot=0, color='blue') kind #Informa o tipo de gr\u00e1fico a ser criado, neste caso tipo barra (bar); figsize #Informa o tamanho que deseja criar o gr\u00e1fico, necessario informar em Tupla (0,0), entre parenteses; grid #Informa se deseja colocar linhas de grade na plotagem, neste caso n\u00e3o ser\u00e1 adicionado, ent\u00e3o fica False; rot #Informa o grau de rota\u00e7\u00e3o que os dados do eixo X v\u00e3o ficar, neste caso ser\u00e1 reto sem inclina\u00e7\u00e3o, valor 0; color #Informa a cor que deseja colocar no gr\u00e1fico, neste caso azul (blue); #Plotar um gr\u00e1fico com T\u00edtulos e legendas; plt.title('T\u00edtulo do Gr\u00e1fico') plt.xlabel('Legenda do Eixo X') plt.ylabel('Legenda do Eixo Y') plt.show() #Plota o gr\u00e1fico Manipulando loops em Python loops aninhados for i in range(0,5): for a in range(0,5): print(a) Operando valores em lista usando for listab = [32,53,85,10,15,17,19] soma = 0 for i in listab: double_i = i * 2 soma += double_i print(soma) loops em listas dentro de listas listaa = [[1,2,3],[10,15,14],[10.1,8.7,2.3]] for valor in lista: print(valor) Contar a quantidade de itens de uma lista lista1 = [5,10,13,17] count = 0 for item in lista1: count += 1 print(count) Contar a quantidade de colunas de um item da lista lista2 = [[1,2,3],[3,3,5],[5,6,7]] primeiro_item = lista2[0] count = 0 for colunas in primeiro_item: count += 1 print(count) Pesquisando em listas lista3 = [5,6,7,8,9,10] for item in lista3: if item == 5: print(\"N\u00famero 5 encontrado!\") Usando while para contar de 0 a 5 count = 0 while count < 6: print(count) count += 1 Usando else para dar stop de loop count = 0 while count < 6: print(\"Contando... \",count) count += 1 else: print(\"Contagem encerrada!\") Pular itera\u00e7\u00f5es em um loop for nome in 'jose': if nome == 's': continue print(nome) Exemplo de verifica\u00e7\u00e3o de n\u00famero primo atrav\u00e9s de loops for i in range(2,30): j = 2 counter = 0 while j < i: if i % j == 0: counter = 1 j += 1 else: j = j + 1 if counter == 0: print(str(i)+'\u00e9 um n\u00famero primo') counter = 0 else: counter = 0 Usando Range para contagem decrescente for i in range(0,-12,-2): print(i) Usando Range para imprimir os itens da lista lista4 = ['Banana','Uva','Laranja','Ma\u00e7a'] comprimento_lista4 = len(lista4) for i in range(0,comprimento_lista4): print(lista4[i])","title":"Scripts Python"},{"location":"python/python_scripts.html#graficos-em-python","text":"","title":"Gr\u00e1ficos em Python"},{"location":"python/python_scripts.html#importando-bibliotecas-python","text":"%matplotlib inline --> #Inicia a ferramenta do python; import pandas as pd --> #Importa a biblioteca pandas e d\u00e1 o apelido 'pd'; import matplotlib.pyplot as plt --> #Importa a biblioteca matplotlib e d\u00e1 um apelido 'plt'; import seaborn as sns ---> #Importa a biblioteca Seaborn e d\u00e1 um apelido 'sns'; plt.style.use('ggplot') ---> #Configura a plotagem do gr\u00e1fico;","title":"Importando Bibliotecas Python"},{"location":"python/python_scripts.html#codigos-de-criacao-e-manipulacao-de-graficos","text":"#Criar uma vari\u00e1vel para inserir o Dataset(base de dados para an\u00e1lise); nome_variavel = pd.read_csv('nome_arquivo.csv') #Visualizar a quantidade de linhas da tabela de dados do Dataset; nome_variavel.head(numero_linhas) #Visualizar informa\u00e7\u00f5es das colunas; nome_variavel.describe() #Visualizar tipo de dado de cada coluna; nome_variavel.dtypes #Visualizar quantidades de linhas e colunas do Dataset; nome_variavel.shape #Visualizar quantidades de uma ou v\u00e1rias colunas; nome_variavel['Nome_coluna'].value_counts() #Plotar um gr\u00e1fico simples de coluna e valores usando a biblioteca pandas/matplotlib, usando o c\u00f3digo de plotagem '.plot()'; nome_variavel['Nome_coluna'].value_counts().plot #Plotar um gr\u00e1fico visualmente elaborado em uma linha de c\u00f3digo; nome_variavel['Nome_coluna'].value_counts().head(10).plot(kind='bar', figsize=(11,5), grid=False, rot=0, color='blue') kind #Informa o tipo de gr\u00e1fico a ser criado, neste caso tipo barra (bar); figsize #Informa o tamanho que deseja criar o gr\u00e1fico, necessario informar em Tupla (0,0), entre parenteses; grid #Informa se deseja colocar linhas de grade na plotagem, neste caso n\u00e3o ser\u00e1 adicionado, ent\u00e3o fica False; rot #Informa o grau de rota\u00e7\u00e3o que os dados do eixo X v\u00e3o ficar, neste caso ser\u00e1 reto sem inclina\u00e7\u00e3o, valor 0; color #Informa a cor que deseja colocar no gr\u00e1fico, neste caso azul (blue); #Plotar um gr\u00e1fico com T\u00edtulos e legendas; plt.title('T\u00edtulo do Gr\u00e1fico') plt.xlabel('Legenda do Eixo X') plt.ylabel('Legenda do Eixo Y') plt.show() #Plota o gr\u00e1fico","title":"C\u00f3digos de Cria\u00e7\u00e3o e Manipula\u00e7\u00e3o de Gr\u00e1ficos"},{"location":"python/python_scripts.html#manipulando-loops-em-python","text":"","title":"Manipulando loops em Python"},{"location":"python/python_scripts.html#loops-aninhados","text":"for i in range(0,5): for a in range(0,5): print(a)","title":"loops aninhados"},{"location":"python/python_scripts.html#operando-valores-em-lista-usando-for","text":"listab = [32,53,85,10,15,17,19] soma = 0 for i in listab: double_i = i * 2 soma += double_i print(soma)","title":"Operando valores em lista usando for"},{"location":"python/python_scripts.html#loops-em-listas-dentro-de-listas","text":"listaa = [[1,2,3],[10,15,14],[10.1,8.7,2.3]] for valor in lista: print(valor)","title":"loops em listas dentro de listas"},{"location":"python/python_scripts.html#contar-a-quantidade-de-itens-de-uma-lista","text":"lista1 = [5,10,13,17] count = 0 for item in lista1: count += 1 print(count)","title":"Contar a quantidade de itens de uma lista"},{"location":"python/python_scripts.html#contar-a-quantidade-de-colunas-de-um-item-da-lista","text":"lista2 = [[1,2,3],[3,3,5],[5,6,7]] primeiro_item = lista2[0] count = 0 for colunas in primeiro_item: count += 1 print(count)","title":"Contar a quantidade de colunas de um item da lista"},{"location":"python/python_scripts.html#pesquisando-em-listas","text":"lista3 = [5,6,7,8,9,10] for item in lista3: if item == 5: print(\"N\u00famero 5 encontrado!\")","title":"Pesquisando em listas"},{"location":"python/python_scripts.html#usando-while-para-contar-de-0-a-5","text":"count = 0 while count < 6: print(count) count += 1","title":"Usando while para contar de 0 a 5"},{"location":"python/python_scripts.html#usando-else-para-dar-stop-de-loop","text":"count = 0 while count < 6: print(\"Contando... \",count) count += 1 else: print(\"Contagem encerrada!\")","title":"Usando else para dar stop de loop"},{"location":"python/python_scripts.html#pular-iteracoes-em-um-loop","text":"for nome in 'jose': if nome == 's': continue print(nome)","title":"Pular itera\u00e7\u00f5es em um loop"},{"location":"python/python_scripts.html#exemplo-de-verificacao-de-numero-primo-atraves-de-loops","text":"for i in range(2,30): j = 2 counter = 0 while j < i: if i % j == 0: counter = 1 j += 1 else: j = j + 1 if counter == 0: print(str(i)+'\u00e9 um n\u00famero primo') counter = 0 else: counter = 0","title":"Exemplo de verifica\u00e7\u00e3o de n\u00famero primo atrav\u00e9s de loops"},{"location":"python/python_scripts.html#usando-range-para-contagem-decrescente","text":"for i in range(0,-12,-2): print(i)","title":"Usando Range para contagem decrescente"},{"location":"python/python_scripts.html#usando-range-para-imprimir-os-itens-da-lista","text":"lista4 = ['Banana','Uva','Laranja','Ma\u00e7a'] comprimento_lista4 = len(lista4) for i in range(0,comprimento_lista4): print(lista4[i])","title":"Usando Range para imprimir os itens da lista"}]}